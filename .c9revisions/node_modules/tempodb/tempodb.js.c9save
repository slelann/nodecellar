{"ts":1368444827188,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var http = require('http');\nvar https = require('https');\nvar zlib = require('zlib');\nvar ID = 'TempoDB: ';\n\nvar TempoDBClient = exports.TempoDBClient =\n    function(key, secret, options) {\n        /*\n            options\n                hostname (string)\n                port (Integer)\n                secure (Boolean)\n                version (string)\n        */\n        options = options || {};\n\n        const HOST = 'api.tempo-db.com',\n              PORT = 443,\n              VERSION = 'v1',\n              SECURE = true;\n\n        var hostname = options.hostname || HOST;\n        var auth = 'Basic ' + new Buffer(key+':'+secret).toString('base64');\n        var headers = {\n                'Host': hostname,\n                'Authorization': auth,\n                'User-Agent': \"tempodb-nodejs/0.2.1\",\n                'Accept-Encoding': 'gzip',\n                'Connection': 'keep-alive'\n        };\n\n        this.key = key;\n        this.secret = secret;\n        this.hostname = hostname;\n        this.port = options.port || PORT;\n        this.connection = options.secure || SECURE ? https : http;\n        this.version = options.version || VERSION;\n        this.path = '/' + this.version;\n        this.headers = headers;\n    }\n\nTempoDBClient.prototype.call = function(method, path, body, callback) {\n    var json_body = '';\n    if (body) {\n        json_body = JSON.stringify(body);\n        this.headers['Content-Length'] = json_body.length;\n    }\n    else {\n      this.headers['Content-Length'] = 0\n    }\n\n    var options = {\n        host: this.hostname,\n        port: this.port,\n        path: this.path+path || this.path,\n        method: method,\n        headers: this.headers\n    };\n\n    var req = this.connection.request(options, function (res) {\n        var data = '';\n        var response = res.statusCode;\n\n        if(res.headers['content-encoding'] == 'gzip') {\n          res = res.pipe(zlib.createGunzip());\n        }\n\n        //the listener that handles the response chunks\n        res.addListener('data', function (chunk) {\n            data += chunk.toString();\n        });\n\n        res.addListener('end', function() {\n            result = '';\n            if (data) {\n                if (response < 300) {\n                    result = JSON.parse(data);\n                }\n                else {\n                    result = data;\n                }\n            }\n\n            if (typeof callback != 'undefined') {\n                callback({\n                    response: response,\n                    body: result\n                });\n            }\n        });\n    });\n\n    if (body) {\n        req.write(json_body);\n    }\n    req.end();\n}\n\nTempoDBClient.prototype.create_series = function(key, callback) {\n    data = {};\n\n    if (typeof key == 'string' && key) {\n        data.key = key;\n    }\n\n    return this.call('POST', '/series/', data, callback);\n}\n\nTempoDBClient.prototype.get_series = function(options, callback) {\n    /*\n        options\n            id (Array of ids or single id)\n            key (Array of keys or single key)\n            tag (string or Array[string])\n            attr ({key: val, key2: val2})\n\n    */\n    options = options || {};\n    query_string = '?' + EncodeQueryData(options);\n\n    return this.call('GET', '/series/' + query_string, null, callback);\n}\n\nTempoDBClient.prototype.update_series = function(series_id, series_key, name, attributes, tags, callback) {\n    if (!(tags instanceof Array)) {\n        throw ID + 'tags must be an array';\n    }\n\n    if (!(attributes instanceof Object)) {\n        throw ID + 'attributes must be an Object';\n    }\n\n    data = {\n        id: series_id,\n        key: series_key,\n        name: name,\n        attributes: attributes,\n        tags: tags\n    }\n\n    return this.call('PUT', '/series/id/' + series_id + '/', data, callback);\n}\n\nTempoDBClient.prototype.read = function(start, end, options, callback) {\n    /*\n        options\n            id (Array of ids or single id)\n            key (Array of keys or single key)\n            interval (string)\n            function (string)\n\n    */\n    options = options || {};\n    options.start = ISODateString(start);\n    options.end = ISODateString(end);\n    query_string = '?' + EncodeQueryData(options);\n\n    return this.call('GET', '/data/' + query_string, null, callback);\n};\n\nTempoDBClient.prototype.read_id = function(series_id, start, end, options, callback) {\n    /*\n        options\n            interval (string)\n            function (string)\n\n    */\n    options = options || {};\n    options.start = ISODateString(start);\n    options.end = ISODateString(end);\n    query_string = '?' + EncodeQueryData(options);\n\n    return this.call('GET', '/series/id/' + series_id + '/data/' + query_string, null, callback);\n}\n\nTempoDBClient.prototype.read_key = function(series_key, start, end, options, callback) {\n    /*\n        options\n            interval (string)\n            function (string)\n\n    */\n    options = options || {};\n    options.start = ISODateString(start);\n    options.end = ISODateString(end);\n    query_string = '?' + EncodeQueryData(options);\n\n    return this.call('GET', '/series/key/' + series_key + '/data/' + query_string, null, callback);\n}\n\nTempoDBClient.prototype.write_id = function(series_id, data, callback) {\n    return this.call('POST', '/series/id/' + series_id + '/data/', data, callback);\n}\n\nTempoDBClient.prototype.write_key = function(series_key, data, callback) {\n    return this.call('POST', '/series/key/' + series_key + '/data/', data, callback);\n}\n\nTempoDBClient.prototype.write_bulk = function(ts, data, callback) {\n    var body = {\n        t: ISODateString(ts),\n        data: data\n    }\n\n    return this.call('POST', '/data/', body, callback);\n}\n\nTempoDBClient.prototype.increment_id = function(series_id, data, callback) {\n    return this.call('POST', '/series/id/' + series_id + '/increment/', data, callback);\n}\n\nTempoDBClient.prototype.increment_key = function(series_key, data, callback) {\n    return this.call('POST', '/series/key/' + series_key + '/increment/', data, callback);\n}\n\nTempoDBClient.prototype.increment_bulk = function(ts, data, callback) {\n    var body = {\n        t: ISODateString(ts),\n        data: data\n    }\n\n    return this.call('POST', '/increment/', body, callback);\n}\n\nTempoDBClient.prototype.delete_id = function(series_id, start, end, callback) {\n  var options = {\n    start: ISODateString(start),\n    end:   ISODateString(end)\n  }\n  var query_string = '?' + EncodeQueryData(options);\n\n  return this.call('DELETE', '/series/id/'+series_id+'/data/'+query_string, null, callback);\n}\n\nTempoDBClient.prototype.delete_key = function(series_key, start, end, callback) {\n  var options = {\n    start: ISODateString(start),\n    end:   ISODateString(end)\n  }\n\n  var query_string = '?' + EncodeQueryData(options);\n\n  return this.call('DELETE', '/series/key/'+series_key+'/data/'+query_string, null, callback);\n}\n\n\nvar EncodeQueryData = function(data) {\n   var ret = [];\n   for (var key in data) {\n        var value = data[key];\n\n        if (value instanceof Array) {\n            for (var v in value){\n                ret.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(value[v]));\n            }\n        }\n        else if (value instanceof Object) {\n            for (var v in value){\n                ret.push(encodeURIComponent(key) + \"[\" + encodeURIComponent(v) + \"]=\" + encodeURIComponent(value[v]));\n            }\n        }\n        else {\n            // plain value\n            ret.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(value));\n        }\n    }\n\n   return ret.join(\"&\");\n}\n\nvar ISODateString = function(d) {\n    // If you pass a string for a date we will assume that it is already in ISO format\n    if(typeof(d) == 'string') {\n        return d;\n    }\n\n    function pad(n) {\n        return n<10 ? '0' + n : n;\n    }\n\n    return d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + 'Z';\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":8047}]],"length":8047}
{"contributors":[],"silentsave":true,"ts":1368777185068,"patch":[[{"diffs":[[0,"key) + \""],[-1,"["],[1,"{"],[0,"\" + enco"]],"start1":7306,"start2":7306,"length1":17,"length2":17}]],"length":8047,"saved":false}
{"ts":1368777192598,"patch":[[{"diffs":[[0,"key) + \""],[-1,"{"],[1,"["],[0,"\" + enco"]],"start1":7306,"start2":7306,"length1":17,"length2":17}]],"length":8047,"saved":false}
{"ts":1368777584007,"patch":[[{"diffs":[[0,"ar v in value){\n"],[1,"            \tconsole.\n"],[0,"                "]],"start1":7246,"start2":7246,"length1":32,"length2":54}]],"length":8069,"saved":false}
{"ts":1368777585436,"patch":[[{"diffs":[[0,"console."],[1,"lo"],[0,"\n       "]],"start1":7275,"start2":7275,"length1":16,"length2":18}]],"length":8071,"saved":false}
{"ts":1368777586053,"patch":[[{"diffs":[[0,"nsole.lo"],[1,"g()"],[0,"\n       "]],"start1":7277,"start2":7277,"length1":16,"length2":19}]],"length":8074,"saved":false}
{"ts":1368777595913,"patch":[[{"diffs":[[0,"le.log()"],[1,";"],[0,"\n       "]],"start1":7280,"start2":7280,"length1":16,"length2":17}]],"length":8075,"saved":false}
{"ts":1368777597536,"patch":[[{"diffs":[[0,"ole.log("],[1,"encodeURIComponent(key) + \"[\" + encodeURIComponent(v) + \"]=\" + encodeURIComponent(value[v])"],[0,");\n     "]],"start1":7279,"start2":7279,"length1":16,"length2":107}]],"length":8166,"saved":false}
{"ts":1368777603003,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"lib"],[0,"encodeUR"]],"start1":7279,"start2":7279,"length1":16,"length2":20}]],"length":8170,"saved":false}
{"ts":1368777605466,"patch":[[{"diffs":[[0,"log(\"lib"],[1," : "],[0,"encodeUR"]],"start1":7283,"start2":7283,"length1":16,"length2":19}]],"length":8173,"saved":false}
{"ts":1368777606540,"patch":[[{"diffs":[[0,"(\"lib : "],[1,"\""],[0,"encodeUR"]],"start1":7286,"start2":7286,"length1":16,"length2":17}]],"length":8174,"saved":false}
{"ts":1368777607261,"patch":[[{"diffs":[[0,"\"lib : \""],[1," "],[0,"encodeUR"]],"start1":7287,"start2":7287,"length1":16,"length2":17}]],"length":8175,"saved":false}
{"ts":1368777608118,"patch":[[{"diffs":[[0,"\"lib : \""],[1," +"],[0," encodeU"]],"start1":7287,"start2":7287,"length1":16,"length2":18}]],"length":8177,"saved":false}
{"ts":1368777614143,"patch":[[{"diffs":[[0,"og(\"lib "],[1,"tempo"],[0,": \" + en"]],"start1":7284,"start2":7284,"length1":16,"length2":21}]],"length":8182,"saved":false}
{"contributors":[],"silentsave":false,"ts":1368778311141,"patch":[[{"diffs":[[0,"   \t"],[-1,"console.log(\"lib tempo: \" + encodeURIComponent(key) + \"[\" + encodeURIComponent(v) + \"]=\" + encodeURIComponent(value[v]));\n                "],[0,"ret."]],"start1":7271,"start2":7271,"length1":146,"length2":8}]],"length":8044,"saved":false}
{"contributors":[],"silentsave":true,"ts":1371030477036,"patch":[[{"diffs":[[0,"Data(options);\n\n"],[1,"\t\n"],[0,"    return this."]],"start1":4200,"start2":4200,"length1":32,"length2":34}]],"length":8046,"saved":false}
{"ts":1371030488210,"patch":[[{"diffs":[[0,"ons);\n\n\t"],[1,"console"],[0,"\n    ret"]],"start1":4209,"start2":4209,"length1":16,"length2":23}]],"length":8053,"saved":false}
{"ts":1371030488928,"patch":[[{"diffs":[[0,"\tconsole"],[1,"."],[0,"\n    ret"]],"start1":4216,"start2":4216,"length1":16,"length2":17}]],"length":8054,"saved":false}
{"ts":1371030490401,"patch":[[{"diffs":[[0,"console."],[1,"log()"],[0,"\n    ret"]],"start1":4217,"start2":4217,"length1":16,"length2":21}]],"length":8059,"saved":false}
{"ts":1371030490890,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"\""],[0,")\n    re"]],"start1":4221,"start2":4221,"length1":16,"length2":18}]],"length":8061,"saved":false}
{"ts":1371030491613,"patch":[[{"diffs":[[0,"le.log(\""],[1,"o"],[0,"\")\n    r"]],"start1":4222,"start2":4222,"length1":16,"length2":17}]],"length":8062,"saved":false}
{"ts":1371030493485,"patch":[[{"diffs":[[0,"e.log(\"o"],[1,"ptions="],[0,"\")\n    r"]],"start1":4223,"start2":4223,"length1":16,"length2":23}]],"length":8069,"saved":false}
{"ts":1371030494982,"patch":[[{"diffs":[[0,"ptions=\""],[1,"+"],[0,")\n    re"]],"start1":4231,"start2":4231,"length1":16,"length2":17}]],"length":8070,"saved":false}
{"ts":1371030497258,"patch":[[{"diffs":[[0,"tions=\"+"],[1,"query"],[0,")\n    re"]],"start1":4232,"start2":4232,"length1":16,"length2":21}]],"length":8075,"saved":false}
{"ts":1371030500548,"patch":[[{"diffs":[[0,"=\"+query"],[1,"_string"],[0,")\n    re"]],"start1":4237,"start2":4237,"length1":16,"length2":23}]],"length":8082,"saved":false}
{"ts":1371030502069,"patch":[[{"diffs":[[0,"uery_string)"],[1,";\n\t"],[0,"\n    return "]],"start1":4241,"start2":4241,"length1":24,"length2":27}]],"length":8085,"saved":false}
