{"ts":1371562979544,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Export actions prototype for strategies operating within an HTTP context.\n */\nvar actions = module.exports = {};\n\n\n/**\n * Authenticate `user`, with optional `info`.\n *\n * Strategies should call this function to successfully authenticate a user.\n * `user` should be an object supplied by the application after it has been\n * given an opportunity to verify credentials.  `info` is an optional argument\n * containing additional user information.  This is useful for third-party\n * authentication strategies to pass profile details.\n *\n * @param {Object} user\n * @param {Object} info\n * @api public\n */\nactions.success = function(user, info) {\n  this.delegate.success.apply(this, arguments);\n}\n\n/**\n * Fail authentication, with optional `challenge` and `status`, defaulting to\n * 401.\n *\n * Strategies should call this function to fail an authentication attempt.\n *\n * @param {String} challenge\n * @param {Number} status\n * @api public\n */\nactions.fail = function(challenge, status) {\n  this.delegate.fail.apply(this, arguments);\n}\n\n/**\n * Redirect to `url` with optional `status`, defaulting to 302.\n *\n * Strategies should call this function to redirect the user (via their user\n * agent) to a third-party website for authentication.\n *\n * @param {String} url\n * @param {Number} status\n * @api public\n */\nactions.redirect = function(url, status) {\n  var res = this.res;\n  if (typeof res.redirect == 'function') {\n    // If possible use redirect method on the response\n    // Assume Express API, optional status param comes first\n    if (status) {\n      res.redirect(status, url);\n    } else {\n      res.redirect(url);\n    }\n  } else {\n    // Otherwise fall back to native methods\n    res.statusCode = status || 302;\n    res.setHeader('Location', url);\n    res.setHeader('Content-Length', '0');\n    res.end();\n  }\n}\n\n/**\n * Pass without making a success or fail decision.\n *\n * Under most circumstances, Strategies should not need to call this function.\n * It exists primarily to allow previous authentication state to be restored,\n * for example from an HTTP session.\n *\n * @api public\n */\nactions.pass = function() {\n  this.next();\n}\n\n/**\n * Internal error while performing authentication.\n *\n * Strategies should call this function when an internal error occurs during the\n * process of performing authentication; for example, if the user directory is\n * not available.\n *\n * @param {Error} err\n * @api public\n */\nactions.error = function(err) {\n  this.next(err);\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2474}]],"length":2474}
