{"ts":1369254508011,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\nvar util = require('util');\n\n\n/**\n * Passport initialization.\n *\n * Intializes Passport for incoming requests, allowing authentication strategies\n * to be applied.\n *\n * If sessions are being utilized, applications must set up Passport with\n * functions to serialize a user into and out of a session.  For example, a\n * common pattern is to serialize just the user ID into the session (due to the\n * fact that it is desirable to store the minimum amount of data in a session).\n * When a subsequent request arrives for the session, the full User object can\n * be loaded from the database by ID.\n *\n * Note that additional middleware is required to persist login state, so we\n * must use the `connect.session()` middleware _before_ `passport.initialize()`.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(connect.cookieParser());\n *       app.use(connect.session({ secret: 'keyboard cat' }));\n *       app.use(passport.initialize());\n *       app.use(passport.session());\n *     });\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @return {Function}\n * @api public\n */\nmodule.exports = function initialize() {\n  \n  return function initialize(req, res, next) {\n    var passport = this;\n    req._passport = {};\n    req._passport.instance = passport;\n\n    //console.log('!! session: ' + util.inspect(req.session));\n    \n    if (req.session && req.session[passport._key]) {\n      // load data from existing session\n      req._passport.session = req.session[passport._key];\n    } else if (req.session) {\n      // initialize new session\n      req.session[passport._key] = {};\n      req._passport.session = req.session[passport._key];\n    } else {\n      // no session is available\n      req._passport.session = {};\n    }\n    \n    next();\n  }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2102}]],"length":2102}
{"contributors":[],"silentsave":true,"ts":1371562896743,"patch":[[{"diffs":[[0,"t;\n\n    "],[-1,"//"],[0,"console."]],"start1":1610,"start2":1610,"length1":18,"length2":16}]],"length":2100,"saved":false}
{"contributors":[],"silentsave":false,"ts":1371646302184,"patch":[[{"diffs":[[0,"t;\n\n    "],[1,"//"],[0,"console."]],"start1":1610,"start2":1610,"length1":16,"length2":18}]],"length":2102,"saved":false}
