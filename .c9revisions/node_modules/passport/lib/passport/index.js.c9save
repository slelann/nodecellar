{"ts":1369254489342,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\nvar fs = require('fs')\n  , path = require('path')\n  , util = require('util')\n  , Strategy = require('./strategy')\n  , SessionStrategy = require('./strategies/session')\n  , initialize = require('./middleware/initialize')\n  , authenticate = require('./middleware/authenticate');\n\n\n/**\n * `Passport` constructor.\n *\n * @api public\n */\nfunction Passport() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  \n  this._userProperty = 'user';\n  \n  this.use(new SessionStrategy());\n};\n\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Passport} for chaining\n * @api public\n */\nPassport.prototype.use = function(name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n  if (!name) throw new Error('authentication strategies must have a name');\n  \n  this._strategies[name] = strategy;\n  return this;\n};\n\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Passport} for chaining\n * @api public\n */\nPassport.prototype.unuse = function(name) {\n  delete this._strategies[name];\n  return this;\n}\n\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Passport} for chaining\n * @api public\n */\nPassport.prototype.framework = function(fw) {\n  this._framework = fw;\n  return this;\n}\n\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(passport.initialize());\n *     });\n *\n *     app.configure(function() {\n *       app.use(passport.initialize({ userProperty: 'currentUser' }));\n *     });\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.initialize = function(options) {\n  options = options || {};\n  this._userProperty = options.userProperty || 'user';\n  \n  if (this._framework && this._framework.initialize) {\n    return this._framework.initialize().bind(this);\n  }\n  \n  return initialize().bind(this);\n}\n\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.configure(function() {\n *       app.use(connect.cookieParser());\n *       app.use(connect.session({ secret: 'keyboard cat' }));\n *       app.use(passport.initialize());\n *       app.use(passport.session());\n *     });\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.session = function(options) {\n  return this.authenticate('session', options);\n}\n\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.authenticate = function(strategy, options, callback) {\n  if (this._framework && this._framework.authenticate) {\n    return this._framework.authenticate(strategy, options, callback).bind(this);\n  }\n  \n  return authenticate(strategy, options, callback).bind(this);\n}\n\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nPassport.prototype.authorize = function(strategy, options, callback) {\n  options = options || {};\n  options.assignProperty = 'account';\n  \n  return authenticate(strategy, options, callback).bind(this);\n}\n\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\nPassport.prototype.serializeUser = function(fn, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n  var user = fn;\n  \n  var stack = this._serializers;\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or serialized object was obtained, done\n    if (err || obj || obj === 0) { return done(err, obj); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('failed to serialize user into session'));\n    }\n    \n    try {\n      layer(user, function(e, o) { pass(i + 1, e, o); } )\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n}\n\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\nPassport.prototype.deserializeUser = function(fn, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n  var obj = fn;\n  \n  var stack = this._deserializers;\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or deserialized user was obtained, done\n    if (err || user) { return done(err, user); }\n    // a valid user existed when establishing the session, but that user has\n    // since been removed\n    if (user === null || user === false) { return done(null, false); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('failed to deserialize user out of session'));\n    }\n    \n    try {\n      layer(obj, function(e, u) { pass(i + 1, e, u); } )\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n}\n\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\nPassport.prototype.transformAuthInfo = function(fn, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n  var info = fn;\n  \n  var stack = this._infoTransformers;\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or transformed info was obtained, done\n    if (err || tinfo) { return done(err, tinfo); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        pass(i + 1, null, t);\n      } else {\n        // async\n        layer(info, function(e, t) { pass(i + 1, e, t); } )\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n}\n\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\nPassport.prototype._strategy = function(name) {\n  return this._strategies[name];\n}\n\n\n/**\n * Export default singleton.\n *\n * @api public\n */\nexports = module.exports = new Passport();\n\n/**\n * Framework version.\n */\nrequire('pkginfo')(module, 'version');\n\n/**\n * Expose constructors.\n */\nexports.Passport = Passport;\nexports.Strategy = Strategy;\n\n\n/**\n * Expose strategies.\n */\nexports.strategies = {};\nexports.strategies.SessionStrategy = SessionStrategy;\n\n\n/**\n * HTTP extensions.\n */\nrequire('./http/request');"]],"start1":0,"start2":0,"length1":0,"length2":12985}]],"length":12985}
{"contributors":[],"silentsave":true,"ts":1370963169726,"patch":[[{"diffs":[[0,"(options) {\n"],[1,"\tconso\n"],[0,"  options = "]],"start1":3177,"start2":3177,"length1":24,"length2":31}]],"length":12992,"saved":false}
{"ts":1370963172590,"patch":[[{"diffs":[[0,"{\n\tconso"],[1,"le.log(\"p\")"],[0,"\n  optio"]],"start1":3187,"start2":3187,"length1":16,"length2":27}]],"length":13003,"saved":false}
{"ts":1370963174834,"patch":[[{"diffs":[[0,"e.log(\"p"],[1,"assport.in"],[0,"\")\n  opt"]],"start1":3196,"start2":3196,"length1":16,"length2":26}]],"length":13013,"saved":false}
{"ts":1370963177700,"patch":[[{"diffs":[[0,"sport.in"],[1,"itialize)"],[0,"\")\n  opt"]],"start1":3206,"start2":3206,"length1":16,"length2":25}]],"length":13022,"saved":false}
{"ts":1370963179634,"patch":[[{"diffs":[[0,"alize)\")"],[1,";"],[0,"\n  optio"]],"start1":3217,"start2":3217,"length1":16,"length2":17}]],"length":13023,"saved":false}
{"ts":1370963199063,"patch":[[{"diffs":[[0,"itialize"],[-1,")"],[0,"\");\n  op"]],"start1":3214,"start2":3214,"length1":17,"length2":16}]],"length":13022,"saved":false}
{"ts":1370963223278,"patch":[[{"diffs":[[0,"callback) {\n"],[1,"\t\n"],[0,"  if (this._"]],"start1":6249,"start2":6249,"length1":24,"length2":26}]],"length":13024,"saved":false}
{"ts":1370963224648,"patch":[[{"diffs":[[0,"ack) {\n\t"],[1,"console.log(\"passport.initialize\");"],[0,"\n  if (t"]],"start1":6254,"start2":6254,"length1":16,"length2":51}]],"length":13059,"saved":false}
{"ts":1370963229234,"patch":[[{"diffs":[[0,"g(\"passport."],[-1,"initializ"],[1,"authenticat"],[0,"e\");\n  if (t"]],"start1":6272,"start2":6272,"length1":33,"length2":35}]],"length":13061,"saved":false}
{"ts":1370963237637,"patch":[[{"diffs":[[0,"enticate) {\n"],[1,"  \tconsole.log(\"passport.authenticate\");\n"],[0,"    return t"]],"start1":6345,"start2":6345,"length1":24,"length2":65}]],"length":13102,"saved":false}
{"ts":1370963242387,"patch":[[{"diffs":[[0,"authenticate"],[1,":"],[0,"\");\n    retu"]],"start1":6382,"start2":6382,"length1":24,"length2":25}]],"length":13103,"saved":false}
{"ts":1370963243672,"patch":[[{"diffs":[[0,"ticate:\""],[1,"+"],[0,");\n    r"]],"start1":6388,"start2":6388,"length1":16,"length2":17}]],"length":13104,"saved":false}
{"ts":1370963249764,"patch":[[{"diffs":[[0,"icate:\"+"],[1,"strate"],[0,");\n    r"]],"start1":6389,"start2":6389,"length1":16,"length2":22}]],"length":13110,"saved":false}
{"ts":1370963250698,"patch":[[{"diffs":[[0,"\"+strate"],[1,"gy"],[0,");\n    r"]],"start1":6395,"start2":6395,"length1":16,"length2":18}]],"length":13112,"saved":false}
{"ts":1370963255482,"patch":[[{"diffs":[[0,"strategy"],[1,"+ \"\""],[0,");\n    r"]],"start1":6397,"start2":6397,"length1":16,"length2":20}]],"length":13116,"saved":false}
{"ts":1370963257026,"patch":[[{"diffs":[[0,"ategy+ \""],[1,":"],[0,"\");\n    "]],"start1":6400,"start2":6400,"length1":16,"length2":17}]],"length":13117,"saved":false}
{"ts":1370963260159,"patch":[[{"diffs":[[0,"egy+ \":\""],[1,"+options"],[0,");\n    r"]],"start1":6402,"start2":6402,"length1":16,"length2":24}]],"length":13125,"saved":false}
{"ts":1370963307863,"patch":[[{"diffs":[[0,"enticate"],[1,":"],[0,"\");\n  if"]],"start1":6288,"start2":6288,"length1":16,"length2":17}]],"length":13126,"saved":false}
{"ts":1370963309588,"patch":[[{"diffs":[[0,"ticate:\""],[1,"+"],[0,");\n  if "]],"start1":6290,"start2":6290,"length1":16,"length2":17}]],"length":13127,"saved":false}
{"ts":1370963317697,"patch":[[{"diffs":[[0,"icate:\"+"],[1,"this._framework"],[0,");\n  if "]],"start1":6291,"start2":6291,"length1":16,"length2":31}]],"length":13142,"saved":false}
{"ts":1370963420678,"patch":[[{"diffs":[[0,"itialize) {\n"],[1,"  \tconsole.log(\"passport.initialize\");\n"],[0,"    return t"]],"start1":3354,"start2":3354,"length1":24,"length2":63}]],"length":13181,"saved":false}
{"ts":1370963422836,"patch":[[{"diffs":[[0,"t.initialize"],[1,"d"],[0,"\");\n    retu"]],"start1":3389,"start2":3389,"length1":24,"length2":25}]],"length":13182,"saved":false}
{"ts":1370963424267,"patch":[[{"diffs":[[0,"sole.log(\"passpo"],[-1,"rt."],[0,"initialized\");\n "]],"start1":3372,"start2":3372,"length1":35,"length2":32}]],"length":13179,"saved":false}
{"ts":1370963426408,"patch":[[{"diffs":[[0,"le.log(\""],[-1,"passpo"],[0,"initiali"]],"start1":3374,"start2":3374,"length1":22,"length2":16}]],"length":13173,"saved":false}
{"ts":1370963438719,"patch":[[{"diffs":[[0,"le.log(\""],[1,"fw "],[0,"initiali"]],"start1":3374,"start2":3374,"length1":16,"length2":19}]],"length":13176,"saved":false}
{"ts":1370963444056,"patch":[[{"diffs":[[0,"nd(this);\n  }\n  "],[1,"console.log(\"fw initialized\");"],[0,"\n  return initia"]],"start1":3442,"start2":3442,"length1":32,"length2":62}]],"length":13206,"saved":false}
{"ts":1370963446403,"patch":[[{"diffs":[[0,"\n  console.log(\""],[-1,"fw "],[0,"initialized\");\n "]],"start1":3455,"start2":3455,"length1":35,"length2":32}]],"length":13203,"saved":false}
{"ts":1370963490805,"patch":[[{"diffs":[[0,"\"initialized"],[1,"="],[0,"\");\n  return"]],"start1":3470,"start2":3470,"length1":24,"length2":25}]],"length":13204,"saved":false}
{"ts":1370963492468,"patch":[[{"diffs":[[0,"alized=\""],[1,"+"],[0,");\n  ret"]],"start1":3476,"start2":3476,"length1":16,"length2":17}]],"length":13205,"saved":false}
{"ts":1370963696776,"patch":[[{"diffs":[[0,"\n  \t"],[-1,"console.log(\"passport.authenticate:\"+strategy+ \":\"+options);"],[0,"\n   "]],"start1":6436,"start2":6436,"length1":68,"length2":8}]],"length":13145,"saved":false}
{"ts":1370963700808,"patch":[[{"diffs":[[0,"icate:\"+"],[-1,"this._framework"],[1,"strategy+ \":\"+options"],[0,");\n  if "]],"start1":6354,"start2":6354,"length1":31,"length2":37}]],"length":13151,"saved":false}
{"ts":1370963750660,"patch":[[{"diffs":[[0,"}\n  "],[-1,"console.log(\"initialized=\"+);"],[0,"\n  r"]],"start1":3454,"start2":3454,"length1":37,"length2":8}]],"length":13122,"saved":false}
{"ts":1370963758598,"patch":[[{"diffs":[[0,") {\n"],[-1,"\tconsole.log(\"passport.initialize\");"],[0,"\n  o"]],"start1":3185,"start2":3185,"length1":44,"length2":8}]],"length":13086,"saved":false}
{"contributors":[],"silentsave":true,"ts":1371562268643,"patch":[[{"diffs":[[0,"gy+ \":\"+"],[1,"JSON."],[0,"options)"]],"start1":6303,"start2":6303,"length1":16,"length2":21}]],"length":13091,"saved":false}
{"ts":1371562269865,"patch":[[{"diffs":[[0,":\"+JSON."],[1,"st"],[0,"options)"]],"start1":6308,"start2":6308,"length1":16,"length2":18}]],"length":13093,"saved":false}
{"ts":1371562271514,"patch":[[{"diffs":[[0,"+JSON.st"],[-1,"options"],[1,"ringify()"],[0,");\n  if "]],"start1":6310,"start2":6310,"length1":23,"length2":25}]],"length":13095,"saved":false}
{"ts":1371562273708,"patch":[[{"diffs":[[0,"ringify("],[1,"options"],[0,"));\n  if"]],"start1":6318,"start2":6318,"length1":16,"length2":23}]],"length":13102,"saved":false}
{"ts":1371562296660,"patch":[[{"diffs":[[0,"ions));\n"],[1,"\tconsole.lo\n"],[0,"  if (th"]],"start1":6329,"start2":6329,"length1":16,"length2":28}]],"length":13114,"saved":false}
{"ts":1371562297965,"patch":[[{"diffs":[[0,"nsole.lo"],[1,"g"],[0,"\n  if (t"]],"start1":6340,"start2":6340,"length1":16,"length2":17}]],"length":13115,"saved":false}
{"ts":1371562299148,"patch":[[{"diffs":[[0,"sole.log"],[1,"()"],[0,"\n  if (t"]],"start1":6341,"start2":6341,"length1":16,"length2":18}]],"length":13117,"saved":false}
{"ts":1371562301040,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"\""],[0,")\n  if ("]],"start1":6342,"start2":6342,"length1":16,"length2":18}]],"length":13119,"saved":false}
{"ts":1371562302493,"patch":[[{"diffs":[[0,"le.log(\""],[1,"c"],[0,"\")\n  if "]],"start1":6343,"start2":6343,"length1":16,"length2":17}]],"length":13120,"saved":false}
{"ts":1371562302991,"patch":[[{"diffs":[[0,"e.log(\"c"],[1,"al"],[0,"\")\n  if "]],"start1":6344,"start2":6344,"length1":16,"length2":18}]],"length":13122,"saved":false}
{"ts":1371562304933,"patch":[[{"diffs":[[0,"log(\"cal"],[1,"lback:"],[0,"\")\n  if "]],"start1":6346,"start2":6346,"length1":16,"length2":22}]],"length":13128,"saved":false}
{"ts":1371562308226,"patch":[[{"diffs":[[0,"llback:\""],[1,"+ca"],[0,")\n  if ("]],"start1":6353,"start2":6353,"length1":16,"length2":19}]],"length":13131,"saved":false}
{"ts":1371562308669,"patch":[[{"diffs":[[0,"ack:\"+ca"],[1,"llback"],[0,")\n  if ("]],"start1":6356,"start2":6356,"length1":16,"length2":22}]],"length":13137,"saved":false}
{"ts":1371562310922,"patch":[[{"diffs":[[0,"allback)"],[1,";"],[0,"\n  if (t"]],"start1":6363,"start2":6363,"length1":16,"length2":17}]],"length":13138,"saved":false}
{"ts":1371563290254,"patch":[[{"diffs":[[0,"\n  \t"],[-1,"console.log(\"fw initialized\");"],[0,"\n   "]],"start1":3329,"start2":3329,"length1":38,"length2":8}]],"length":13108,"saved":false}
{"ts":1371563296073,"patch":[[{"diffs":[[0,"ser';\n  "],[1,"console.log(\"fw initialized\");"],[0,"\n  if (t"]],"start1":3266,"start2":3266,"length1":16,"length2":46}]],"length":13138,"saved":false}
{"ts":1371563300496,"patch":[[{"diffs":[[0,"le.log(\""],[-1,"fw"],[1,"passport"],[0," initial"]],"start1":3279,"start2":3279,"length1":18,"length2":24}]],"length":13144,"saved":false}
