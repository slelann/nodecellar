{"ts":1377767058454,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright (c) 2013, Ben Noordhuis <info@bnoordhuis.nl>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include \"iconv.h\"\n#include \"node.h\"\n#include \"v8.h\"\n\n#include <errno.h>\n#include <assert.h>\n#include <stdint.h>\n\n#include \"node_version.h\"\n\n#if NODE_MAJOR_VERSION == 0 && NODE_MINOR_VERSION <= 10\n# define GetAlignedPointerFromInternalField GetPointerFromInternalField\n# define SetAlignedPointerInInternalField SetPointerInInternalField\n#endif\n\nnamespace\n{\n\nusing v8::Arguments;\nusing v8::Array;\nusing v8::Boolean;\nusing v8::FunctionTemplate;\nusing v8::Handle;\nusing v8::HandleScope;\nusing v8::Integer;\nusing v8::Local;\nusing v8::Null;\nusing v8::Object;\nusing v8::ObjectTemplate;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nstruct Iconv\n{\n  static Persistent<ObjectTemplate> object_template;\n  iconv_t conv_;\n\n  Iconv(iconv_t conv)\n  {\n    conv_ = conv;\n  }\n\n  ~Iconv()\n  {\n    iconv_close(conv_);\n  }\n\n  static void Initialize(Handle<Object> obj)\n  {\n    HandleScope scope;\n    Local<ObjectTemplate> t = ObjectTemplate::New();\n    object_template = Persistent<ObjectTemplate>::New(t);\n    object_template->SetInternalFieldCount(1);\n    obj->Set(String::New(\"make\"),\n             FunctionTemplate::New(Make)->GetFunction());\n    obj->Set(String::New(\"convert\"),\n             FunctionTemplate::New(Convert)->GetFunction());\n#define EXPORT_ERRNO(err) obj->Set(String::New(#err), Integer::New(err))\n    EXPORT_ERRNO(EINVAL);\n    EXPORT_ERRNO(EILSEQ);\n    EXPORT_ERRNO(E2BIG);\n#undef EXPORT_ERRNO\n  }\n\n  static void WeakCallback(Persistent<Value> val, void* arg)\n  {\n    delete static_cast<Iconv*>(arg);\n    val.Dispose();\n    val.Clear();\n  }\n\n  static Handle<Value> Make(const Arguments& args)\n  {\n    HandleScope scope;\n    String::AsciiValue from_encoding(args[0]);\n    String::AsciiValue to_encoding(args[1]);\n    iconv_t conv = iconv_open(*to_encoding, *from_encoding);\n    if (conv == reinterpret_cast<iconv_t>(-1)) return Null();\n    Iconv* iv = new Iconv(conv);\n    Local<Object> t = object_template->NewInstance();\n    Persistent<Object> obj = Persistent<Object>::New(t);\n    obj->SetAlignedPointerInInternalField(0, iv);\n    obj.MakeWeak(iv, WeakCallback);\n    obj.MarkIndependent();\n    return scope.Close(obj);\n  }\n\n  static Handle<Value> Convert(const Arguments& args)\n  {\n    HandleScope scope;\n    Iconv* iv = static_cast<Iconv*>(\n        args[0].As<Object>()->GetAlignedPointerFromInternalField(0));\n    const char* input_buf = static_cast<const char*>(  // NULL on flush.\n        args[1].As<Object>()->GetIndexedPropertiesExternalArrayData());\n    size_t input_start = args[2]->Uint32Value();\n    size_t input_size = args[3]->Uint32Value();\n    char* output_buf = static_cast<char*>(  // Never NULL.\n        args[4].As<Object>()->GetIndexedPropertiesExternalArrayData());\n    size_t output_start = args[5]->Uint32Value();\n    size_t output_size = args[6]->Uint32Value();\n    Local<Array> rc = args[7].As<Array>();\n    if (input_buf != NULL) input_buf += input_start;\n    output_buf += output_start;\n    size_t input_consumed = input_size;\n    size_t output_consumed = output_size;\n    errno = 0;\n    size_t nconv = iconv(iv->conv_,\n                         &input_buf,\n                         &input_size,\n                         &output_buf,\n                         &output_size);\n    int errorno = errno;\n    input_consumed -= input_size;\n    output_consumed -= output_size;\n    rc->Set(0, Integer::NewFromUnsigned(input_consumed));\n    rc->Set(1, Integer::NewFromUnsigned(output_consumed));\n    return scope.Close(Integer::New(errorno));\n  }\n\n  // Forbid implicit copying.\n  Iconv(const Iconv&);\n  void operator=(const Iconv&);\n};\n\nPersistent<ObjectTemplate> Iconv::object_template;\n\n} // namespace\n\nNODE_MODULE(iconv, Iconv::Initialize);\n"]],"start1":0,"start2":0,"length1":0,"length2":4471}]],"length":4471}
