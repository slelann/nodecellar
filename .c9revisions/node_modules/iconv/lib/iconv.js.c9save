{"ts":1377767010036,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright (c) 2013, Ben Noordhuis <info@bnoordhuis.nl>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\nexports.Iconv = Iconv;\n\nvar stream = require('stream');\nvar util = require('util');\n\nvar bindings;\ntry {\n  bindings = require('../build/Release/iconv.node');\n}\ncatch (e) {\n  bindings = require('../build/Debug/iconv.node');\n}\n\nvar E2BIG = bindings.E2BIG | 0;\nvar EILSEQ = bindings.EILSEQ | 0;\nvar EINVAL = bindings.EINVAL | 0;\n\n// Marker object.\nvar FLUSH = {};\n\nfunction Iconv(fromEncoding, toEncoding)\n{\n  if (!(this instanceof Iconv)) {\n    return new Iconv(fromEncoding, toEncoding);\n  }\n\n  stream.Stream.call(this);\n  this.writable = true;\n\n  var conv = bindings.make(fixEncoding(fromEncoding),\n                           fixEncoding(toEncoding));\n  if (conv === null) throw new Error('Conversion not supported.');\n\n  var convert_ = convert.bind({ conv_: conv });\n  var context_ = { trailer: null };\n\n  this.convert = function(input) {\n    return convert_(input, null);\n  };\n\n  this.write = function(input) {\n    try {\n      var buf = convert_(input, context_);\n    }\n    catch (e) {\n      this.emit('error', e);\n      return false;\n    }\n    if (buf && buf.length !== 0) {\n      this.emit('data', buf);\n    }\n    return true;\n  };\n\n  this.end = function(input) {\n    if (typeof(input) !== 'undefined') {\n      this.write(input);\n    }\n    this.write(FLUSH);\n    this.emit('end');\n  };\n}\nutil.inherits(Iconv, stream.Stream);\n\nfunction fixEncoding(encoding)\n{\n  // Convert \"utf8\" to \"utf-8\".\n  return /^utf[^-]/i.test(encoding) ? 'utf-' + encoding.substr(3) : encoding;\n}\n\nfunction convert(input, context) {\n  if (typeof(input) === 'string') {\n    input = new Buffer(input);\n  }\n  if (!(input instanceof Buffer) && input !== FLUSH) {\n    throw new Error('Bad argument.');  // Not a buffer or a string.\n  }\n  if (context !== null && context.trailer !== null) {\n    // Prepend input buffer with trailer from last chunk.\n    var newbuf = new Buffer(context.trailer.length + input.length);\n    context.trailer.copy(newbuf, 0, 0, context.trailer.length);\n    input.copy(newbuf, context.trailer.length, 0, input.length);\n    context.trailer = null;\n    input = newbuf;\n  }\n  var output = new Buffer(input.length * 2);  // To a first approximation.\n  var input_start = 0;\n  var output_start = 0;\n  var input_size = input.length;\n  var output_size = output.length;\n  var out = [0,0];\n  for (;;) {\n    var errno = bindings.convert(this.conv_,\n                                 input,\n                                 input_start,\n                                 input_size,\n                                 output,\n                                 output_start,\n                                 output_size,\n                                 out);\n    var input_consumed = out[0];\n    var output_consumed = out[1];\n    input_start += input_consumed;\n    input_size -= input_consumed;\n    output_start += output_consumed;\n    output_size -= output_consumed;\n    if (errno) {\n      if (errno === E2BIG) {\n        output_size += output.length;\n        var newbuf = new Buffer(output.length * 2);\n        output.copy(newbuf, 0, 0, output_start);\n        output = newbuf;\n        continue;\n      }\n      else if (errno === EILSEQ) {\n        throw errnoException('EILSEQ', 'Illegal character sequence.');\n      }\n      else if (errno === EINVAL) {\n        if (context === null || input === FLUSH) {\n          throw errnoException('EINVAL', 'Incomplete character sequence.');\n        }\n        else {\n          context.trailer = input.slice(input_start);\n          return output.slice(0, output_start);\n        }\n      }\n      else {\n        throw 'unexpected error';\n      }\n    }\n    if (input !== FLUSH) {\n      input = FLUSH;\n      continue;\n    }\n    if (output_start < output.length) {\n      output = output.slice(0, output_start);\n    }\n    return output;\n  }\n}\n\nfunction errnoException(code, errmsg)\n{\n  var err = new Error(errmsg);\n  err.code = code;\n  return err;\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4660}]],"length":4660}
