{"ts":1377767310341,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright (c) 2013, Ben Noordhuis <info@bnoordhuis.nl>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\nvar assert = require('assert');\nvar Iconv = require('../lib/iconv').Iconv;\n\n// unknown source/target encoding\nassert.throws(function() { new Iconv('utf-8', 'xxx'); });\nassert.throws(function() { new Iconv('xxx', 'utf-8'); });\n\n// 'utf8' etc. should not throw \"EINVAL: Conversion not supported\"\nnew Iconv('utf7',    'utf8');\nnew Iconv('utf8',    'utf16');\nnew Iconv('utf16',   'utf32');\nnew Iconv('utf16le', 'utf16be');\nnew Iconv('utf32le', 'utf32be');\n\nvar iconv = new Iconv('utf-8', 'iso-8859-1');\nassert.throws(function() { iconv.convert() });\nassert.throws(function() { iconv.convert(1) });\nassert.throws(function() { iconv.convert({}) });\n\nassert(iconv.convert(new Buffer('xxx')) instanceof Buffer);\nassert(iconv.convert('xxx') instanceof Buffer);\n\nassert.deepEqual(iconv.convert('xxx'), new Buffer('xxx'));\nassert.deepEqual(iconv.convert(new Buffer('xxx')), new Buffer('xxx'));\n\nvar buffer = new Buffer(1); buffer[0] = 235; // ë\nassert.deepEqual(iconv.convert('ë'), buffer);\n\n// partial character sequence should throw EINVAL\nbuffer = new Buffer(1); buffer[0] = 195;\ntry {\n  iconv.convert(buffer);\n} catch (e) {\n  assert.equal(e.code, 'EINVAL');\n}\n\n// belongs to partial character sequence test - new input should be recoded without issues\nbuffer = new Buffer(1); buffer[0] = 235; // ë\nassert.deepEqual(iconv.convert('ë'), buffer);\n\n// stateful encodings should do the Right Thing\niconv = new Iconv('iso-2022-jp', 'utf-8');\nbuffer = new Buffer(5);\nbuffer[0] = 0x1b;  // start escape sequence\nbuffer[1] = 0x24;\nbuffer[2] = 0x40;\nbuffer[3] = 0x24;  // start character sequence\nbuffer[4] = 0x2c;\nassert.deepEqual(iconv.convert(buffer), new Buffer('が'));\n\nbuffer = new Buffer(4);\nbuffer[0] = 0x1b;  // start escape sequence\nbuffer[1] = 0x24;\nbuffer[2] = 0x40;\nbuffer[3] = 0x24;  // start character sequence\n//buffer[4] = 0x2c;\ntry {\n  iconv.convert(buffer);\n} catch (e) {\n  assert.equal(e.code, 'EINVAL');\n}\n\n// non-convertible character sequence should throw EILSEQ\niconv = new Iconv('utf-8', 'ascii');\ntry {\n  iconv.convert('ë');\n} catch (e) {\n  assert.equal(e.code, 'EILSEQ');\n}\n\n// prototypical inheritance should work\nif (false) {  // XXX disabled for now\n  Foo = function() { Foo.prototype.call(this, 'utf-8', 'ascii'); };\n  Foo.prototype = Iconv;\n  new Foo();\n}\n\n// GH-14 ensure that shift sequences are written out\niconv = new Iconv('utf-8', 'utf-7');\nassert.equal(iconv.convert('ç').toString(), '+AOc-');\nassert.equal(iconv.convert('çç').toString(), '+AOcA5w-');\nassert.equal(iconv.convert('çxç').toString(), '+AOc-x+AOc-');\n\n// GH-15 document and support //TRANSLIT and //IGNORE\niconv = new Iconv('utf-8', 'ascii');\nassert.throws(function() { iconv.convert('ça va'); }); // untranslatable\n\niconv = new Iconv('utf-8', 'ascii//ignore');\nassert.equal(iconv.convert('ça va').toString(), 'a va');\n\niconv = new Iconv('utf-8', 'ascii//translit');\nassert.equal(iconv.convert('ça va').toString(), 'ca va');\n\niconv = new Iconv('utf-8', 'ascii//translit');\nassert.throws(function() { iconv.convert('ça va が'); }); // untranslatable\n\niconv = new Iconv('utf-8', 'ascii//translit//ignore');\nassert.equal(iconv.convert('ça va が').toString(), 'ca va ');\n"]],"start1":0,"start2":0,"length1":0,"length2":3947}]],"length":3947}
