{"ts":1377767109381,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"            GNU LIBICONV - character set conversion library\n\nThis library provides an iconv() implementation, for use on systems which\ndon't have one, or whose implementation cannot convert from/to Unicode.\n\nIt provides support for the encodings:\n\n    European languages\n        ASCII, ISO-8859-{1,2,3,4,5,7,9,10,13,14,15,16},\n        KOI8-R, KOI8-U, KOI8-RU,\n        CP{1250,1251,1252,1253,1254,1257}, CP{850,866,1131},\n        Mac{Roman,CentralEurope,Iceland,Croatian,Romania},\n        Mac{Cyrillic,Ukraine,Greek,Turkish},\n        Macintosh\n    Semitic languages\n        ISO-8859-{6,8}, CP{1255,1256}, CP862, Mac{Hebrew,Arabic}\n    Japanese\n        EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP, ISO-2022-JP-2, ISO-2022-JP-1\n    Chinese\n        EUC-CN, HZ, GBK, CP936, GB18030, EUC-TW, BIG5, CP950, BIG5-HKSCS,\n        BIG5-HKSCS:2004, BIG5-HKSCS:2001, BIG5-HKSCS:1999, ISO-2022-CN,\n        ISO-2022-CN-EXT\n    Korean\n        EUC-KR, CP949, ISO-2022-KR, JOHAB\n    Armenian\n        ARMSCII-8\n    Georgian\n        Georgian-Academy, Georgian-PS\n    Tajik\n        KOI8-T\n    Kazakh\n        PT154, RK1048\n    Thai\n        ISO-8859-11, TIS-620, CP874, MacThai\n    Laotian\n        MuleLao-1, CP1133\n    Vietnamese\n        VISCII, TCVN, CP1258\n    Platform specifics\n        HP-ROMAN8, NEXTSTEP\n    Full Unicode\n        UTF-8\n        UCS-2, UCS-2BE, UCS-2LE\n        UCS-4, UCS-4BE, UCS-4LE\n        UTF-16, UTF-16BE, UTF-16LE\n        UTF-32, UTF-32BE, UTF-32LE\n        UTF-7\n        C99, JAVA\n    Full Unicode, in terms of `uint16_t' or `uint32_t'\n        (with machine dependent endianness and alignment)\n        UCS-2-INTERNAL, UCS-4-INTERNAL\n    Locale dependent, in terms of `char' or `wchar_t'\n        (with machine dependent endianness and alignment, and with OS and\n        locale dependent semantics)\n        char, wchar_t\n        The empty encoding name \"\" is equivalent to \"char\": it denotes the\n        locale dependent character encoding.\n\nWhen configured with the option --enable-extra-encodings, it also provides\nsupport for a few extra encodings:\n\n    European languages\n        CP{437,737,775,852,853,855,857,858,860,861,863,865,869,1125}\n    Semitic languages\n        CP864\n    Japanese\n        EUC-JISX0213, Shift_JISX0213, ISO-2022-JP-3\n    Chinese\n        BIG5-2003 (experimental)\n    Turkmen\n        TDS565\n    Platform specifics\n        ATARIST, RISCOS-LATIN1\n\nIt can convert from any of these encodings to any other, through Unicode\nconversion.\n\nIt has also some limited support for transliteration, i.e. when a character\ncannot be represented in the target character set, it can be approximated\nthrough one or several similarly looking characters. Transliteration is\nactivated when \"//TRANSLIT\" is appended to the target encoding name.\n\nlibiconv is for you if your application needs to support multiple character\nencodings, but that support lacks from your system.\n\n\nInstallation\n------------\n\nAs usual for GNU packages:\n\n    $ ./configure --prefix=/usr/local\n    $ make\n    $ make install\n\nAfter installing GNU libiconv for the first time, it is recommended to\nrecompile and reinstall GNU gettext, so that it can take advantage of\nlibiconv.\n\nOn systems other than GNU/Linux, the iconv program will be internationalized\nonly if GNU gettext has been built and installed before GNU libiconv. This\nmeans that the first time GNU libiconv is installed, we have a circular\ndependency between the GNU libiconv and GNU gettext packages, which can be\nresolved by building and installing either\n  - first libiconv, then gettext, then libiconv again,\nor (on systems supporting shared libraries, excluding AIX)\n  - first gettext, then libiconv, then gettext again.\nRecall that before building a package for the second time, you need to erase\nthe traces of the first build by running \"make distclean\".\n\nThis library can be built and installed in two variants:\n\n  - The library mode. This works on all systems, and uses a library\n    `libiconv.so' and a header file `<iconv.h>'. (Both are installed\n    through \"make install\".)\n\n    To use it, simply #include <iconv.h> and use the functions.\n\n    To use it in an autoconfiguring package:\n    - If you don't use automake, append m4/iconv.m4 to your aclocal.m4\n      file.\n    - If you do use automake, add m4/iconv.m4 to your m4 macro repository.\n    - Add to the link command line of libraries and executables that use\n      the functions the placeholder @LIBICONV@ (or, if using libtool for\n      the link, @LTLIBICONV@). If you use automake, the right place for\n      these additions are the *_LDADD variables.\n    Note that 'iconv.m4' is also part of the GNU gettext package, which\n    installs it in /usr/local/share/aclocal/iconv.m4.\n\n  - The libc plug/override mode. This works on GNU/Linux, Solaris and OSF/1\n    systems only. It is a way to get good iconv support without having\n    glibc-2.1.\n    It installs a library `preloadable_libiconv.so'. This library can be used\n    with LD_PRELOAD, to override the iconv* functions present in the C library.\n\n    On GNU/Linux and Solaris:\n        $ export LD_PRELOAD=/usr/local/lib/preloadable_libiconv.so\n\n    On OSF/1:\n        $ export _RLD_LIST=/usr/local/lib/preloadable_libiconv.so:DEFAULT\n\n    A program's source need not be modified, the program need not even be\n    recompiled. Just set the LD_PRELOAD environment variable, that's it!\n\n\nCopyright\n---------\n\nThe libiconv and libcharset _libraries_ and their header files are under LGPL,\nsee file COPYING.LIB.\n\nThe iconv _program_ and the documentation are under GPL, see file COPYING.\n\n\nDownload\n--------\n\n    http://ftp.gnu.org/gnu/libiconv/libiconv-1.14.tar.gz\n\nHomepage\n--------\n\n    http://www.gnu.org/software/libiconv/\n\nBug reports to\n--------------\n\n    <bug-gnu-libiconv@gnu.org>\n\n\nBruno Haible <bruno@clisp.org>\n"]],"start1":0,"start2":0,"length1":0,"length2":5777}]],"length":5777}
