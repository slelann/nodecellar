{"ts":1370441730783,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Express - request\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar http = require('http')\n  , req = http.IncomingMessage.prototype\n  , utils = require('./utils')\n  , parse = require('url').parse\n  , mime = require('mime');\n\n/**\n * Default flash formatters.\n *\n * @type Object\n */\n\nvar flashFormatters = exports.flashFormatters = {\n  s: function(val){\n    return String(val);\n  }\n};\n\n/**\n * Return request header or optional default.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` will yield are\n * interchangeable.\n *\n * Examples:\n *\n *     req.header('Content-Type');\n *     // => \"text/plain\"\n *     \n *     req.header('content-type');\n *     // => \"text/plain\"\n *     \n *     req.header('Accept');\n *     // => undefined\n *     \n *     req.header('Accept', 'text/html');\n *     // => \"text/html\"\n *\n * @param {String} name\n * @param {String} defaultValue\n * @return {String} \n * @api public\n */\n\nreq.header = function(name, defaultValue){\n  switch (name = name.toLowerCase()) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer\n        || defaultValue;\n    default:\n      return this.headers[name] || defaultValue;\n  }\n};\n\n/**\n * Get `field`'s `param` value, defaulting to ''.\n *\n * Examples:\n *\n *     req.get('content-disposition', 'filename');\n *     // => \"something.png\"\n *\n * @param {String} field\n * @param {String} param\n * @return {String}\n * @api public\n */\n\nreq.get = function(field, param){\n  var val = this.header(field);\n  if (!val) return '';\n  var regexp = new RegExp(param + ' *= *(?:\"([^\"]+)\"|([^;]+))', 'i');\n  if (!regexp.exec(val)) return '';\n  return RegExp.$1 || RegExp.$2;\n};\n\n/**\n * Short-hand for `require('url').parse(req.url).pathname`.\n *\n * @return {String}\n * @api public\n */\n\nreq.__defineGetter__('path', function(){\n  return parse(this.url).pathname;\n});\n\n/**\n * Check if the _Accept_ header is present, and includes the given `type`.\n *\n * When the _Accept_ header is not present `true` is returned. Otherwise\n * the given `type` is matched by an exact match, and then subtypes. You\n * may pass the subtype such as \"html\" which is then converted internally\n * to \"text/html\" using the mime lookup table.\n *\n * Examples:\n * \n *     // Accept: text/html\n *     req.accepts('html');\n *     // => true\n *\n *     // Accept: text/*; application/json\n *     req.accepts('html');\n *     req.accepts('text/html');\n *     req.accepts('text/plain');\n *     req.accepts('application/json');\n *     // => true\n *\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => false\n *\n * @param {String} type\n * @return {Boolean}\n * @api public\n */\n\nreq.accepts = function(type){\n  var accept = this.header('Accept');\n\n  // normalize extensions \".json\" -> \"json\"\n  if (type && '.' == type[0]) type = type.substr(1);\n\n  // when Accept does not exist, or contains '*/*' return true\n  if (!accept || ~accept.indexOf('*/*')) {\n    return true;\n  } else if (type) {\n    // allow \"html\" vs \"text/html\" etc\n    if (!~type.indexOf('/')) type = mime.lookup(type);\n\n    // check if we have a direct match\n    if (~accept.indexOf(type)) return true;\n\n    // check if we have type/*\n    type = type.split('/')[0] + '/*';\n    return !!~accept.indexOf(type);\n  } else {\n    return false;\n  }\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks query string params, ex: ?id=12\n *  - Checks urlencoded body params, ex: id=12\n *\n * To utilize urlencoded request bodies, `req.body`\n * should be an object. This can be done by using\n * the `connect.bodyParser` middleware.\n *\n * @param {String} name\n * @param {Mixed} defaultValue\n * @return {String}\n * @api public\n */\n\nreq.param = function(name, defaultValue){\n  // route params like /user/:id\n  if (this.params && this.params.hasOwnProperty(name) && undefined !== this.params[name]) {\n    return this.params[name]; \n  }\n  // query string params\n  if (undefined !== this.query[name]) {\n    return this.query[name]; \n  }\n  // request body params via connect.bodyParser\n  if (this.body && undefined !== this.body[name]) {\n    return this.body[name];\n  }\n  return defaultValue;\n};\n\n/**\n * Queue flash `msg` of the given `type`.\n *\n * Examples:\n *\n *      req.flash('info', 'email sent');\n *      req.flash('error', 'email delivery failed');\n *      req.flash('info', 'email re-sent');\n *      // => 2\n *\n *      req.flash('info');\n *      // => ['email sent', 'email re-sent']\n *\n *      req.flash('info');\n *      // => []\n *\n *      req.flash();\n *      // => { error: ['email delivery failed'], info: [] }\n *\n * Formatting:\n *\n * Flash notifications also support arbitrary formatting support.\n * For example you may pass variable arguments to `req.flash()`\n * and use the %s specifier to be replaced by the associated argument:\n *\n *     req.flash('info', 'email has been sent to %s.', userName);\n *\n * To add custom formatters use the `exports.flashFormatters` object.\n *\n * @param {String} type\n * @param {String} msg\n * @return {Array|Object|Number}\n * @api public\n */\n\nreq.flash = function(type, msg){\n  if (this.session === undefined) throw Error('req.flash() requires sessions');\n  var msgs = this.session.flash = this.session.flash || {};\n  if (type && msg) {\n    var i = 2\n      , args = arguments\n      , formatters = this.app.flashFormatters || {};\n    formatters.__proto__ = flashFormatters;\n    msg = utils.miniMarkdown(msg);\n    msg = msg.replace(/%([a-zA-Z])/g, function(_, format){\n      var formatter = formatters[format];\n      if (formatter) return formatter(utils.escape(args[i++]));\n    });\n    return (msgs[type] = msgs[type] || []).push(msg);\n  } else if (type) {\n    var arr = msgs[type];\n    delete msgs[type];\n    return arr || [];\n  } else {\n    this.session.flash = {};\n    return msgs;\n  }\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\" \n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      // => true\n *     \n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      // => true\n *     \n *      req.is('html');\n *      // => false\n * \n * Ad-hoc callbacks can also be registered with Express, to perform\n * assertions again the request, for example if we need an expressive\n * way to check if our incoming request is an image, we can register \"an image\"\n * callback:\n * \n *       app.is('an image', function(req){\n *         return 0 == req.headers['content-type'].indexOf('image');\n *       });\n *       \n *  Now within our route callbacks, we can use to to assert content types\n *  such as \"image/jpeg\", \"image/png\", etc.\n * \n *      app.post('/image/upload', function(req, res, next){\n *        if (req.is('an image')) {\n *          // do something\n *        } else {\n *          next();\n *        }\n *      });\n * \n * @param {String} type\n * @return {Boolean}\n * @api public\n */\n\nreq.is = function(type){\n  var fn = this.app.is(type);\n  if (fn) return fn(this);\n  var ct = this.headers['content-type'];\n  if (!ct) return false;\n  ct = ct.split(';')[0];\n  if (!~type.indexOf('/')) type = mime.lookup(type);\n  if (~type.indexOf('*')) {\n    type = type.split('/');\n    ct = ct.split('/');\n    if ('*' == type[0] && type[1] == ct[1]) return true;\n    if ('*' == type[1] && type[0] == ct[0]) return true;\n    return false;\n  }\n  return !! ~ct.indexOf(type);\n};\n\n// Callback for isXMLHttpRequest / xhr\n\nfunction isxhr() {\n  return this.header('X-Requested-With', '').toLowerCase() === 'xmlhttprequest';\n}\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @api public\n */\n\nreq.__defineGetter__('isXMLHttpRequest', isxhr);\nreq.__defineGetter__('xhr', isxhr);\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\" \n * setting is enabled the \"X-Forwarded-Proto\" header\n * field will be trusted. If you're running behind\n * a reverse proxy that supplies https for you this\n * may be enabled.\n *\n * @return {String}\n * @api public\n */\n\nreq.__defineGetter__('protocol', function(){\n  var trustProxy = this.app.set('trust proxy');\n  return this.connection.encrypted\n    ? 'https'\n    : trustProxy\n      ? (this.header('X-Forwarded-Proto') || 'http')\n      : 'http';\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol == 'https'\n *\n * @return {Boolean}\n * @api public\n */\n\nreq.__defineGetter__('secure', function(){\n  return 'https' == this.protocol;\n});"]],"start1":0,"start2":0,"length1":0,"length2":8694}]],"length":8694}
