{"ts":1370337141537,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Rickshaw.namespace('Rickshaw.Graph');\n\nRickshaw.Graph = function(args) {\n\n\tthis.element = args.element;\n\tthis.series = args.series;\n\n\tthis.defaults = {\n\t\tinterpolation: 'cardinal',\n\t\toffset: 'zero',\n\t\tmin: undefined,\n\t\tmax: undefined\n\t};\n\n\tRickshaw.keys(this.defaults).forEach( function(k) {\n\t\tthis[k] = args[k] || this.defaults[k];\n\t}, this );\n\n\tthis.window = {};\n\n\tthis.updateCallbacks = [];\n\n\tvar self = this;\n\n\tthis.initialize = function(args) {\n\n\t\tthis.validateSeries(args.series);\n\n\t\tthis.series.active = function() { return self.series.filter( function(s) { return !s.disabled } ) };\n\n\t\tthis.setSize({ width: args.width, height: args.height });\n\n\t\tthis.element.classList.add('rickshaw_graph');\n\t\tthis.vis = d3.select(this.element)\n\t\t\t.append(\"svg:svg\")\n\t\t\t.attr('width', this.width)\n\t\t\t.attr('height', this.height);\n\n\t\tvar renderers = [\n\t\t\tRickshaw.Graph.Renderer.Stack,\n\t\t\tRickshaw.Graph.Renderer.Line,\n\t\t\tRickshaw.Graph.Renderer.Bar,\n\t\t\tRickshaw.Graph.Renderer.Area,\n\t\t\tRickshaw.Graph.Renderer.ScatterPlot\n\t\t];\n\n\t\trenderers.forEach( function(r) {\n\t\t\tif (!r) return;\n\t\t\tself.registerRenderer(new r( { graph: self } ));\n\t\t} );\n\n\t\tthis.setRenderer(args.renderer || 'stack', args);\n\t\tthis.discoverRange();\n\t};\n\n\tthis.validateSeries = function(series) {\n\n\t\tif (!(series instanceof Array) && !(series instanceof Rickshaw.Series)) {\n\t\t\tvar seriesSignature = Object.prototype.toString.apply(series);\n\t\t\tthrow \"series is not an array: \" + seriesSignature;\n\t\t}\n\n\t\tvar pointsCount;\n\n\t\tseries.forEach( function(s) {\n\n\t\t\tif (!(s instanceof Object)) {\n\t\t\t\tthrow \"series element is not an object: \" + s;\n\t\t\t}\n\t\t\tif (!(s.data)) {\n\t\t\t\tthrow \"series has no data: \" + JSON.stringify(s);\n\t\t\t}\n\t\t\tif (!(s.data instanceof Array)) {\n\t\t\t\tthrow \"series data is not an array: \" + JSON.stringify(s.data);\n\t\t\t}\n\n\t\t\tpointsCount = pointsCount || s.data.length;\n\n\t\t\tif (pointsCount && s.data.length != pointsCount) {\n\t\t\t\tthrow \"series cannot have differing numbers of points: \" +\n\t\t\t\t\tpointsCount\t+ \" vs \" + s.data.length + \"; see Rickshaw.Series.zeroFill()\";\n\t\t\t}\n\n\t\t\tvar dataTypeX = typeof s.data[0].x;\n\t\t\tvar dataTypeY = typeof s.data[0].y;\n\n\t\t\tif (dataTypeX != 'number' || dataTypeY != 'number') {\n\t\t\t\tthrow \"x and y properties of points should be numbers instead of \" +\n\t\t\t\t\tdataTypeX + \" and \" + dataTypeY;\n\t\t\t}\n\t\t} );\n\t};\n\n\tthis.dataDomain = function() {\n\n\t\t// take from the first series\n\t\tvar data = this.series[0].data;\n\n\t\treturn [ data[0].x, data.slice(-1).shift().x ];\n\n\t};\n\n\tthis.discoverRange = function() {\n\n\t\tvar domain = this.renderer.domain();\n\n\t\tthis.x = d3.scale.linear().domain(domain.x).range([0, this.width]);\n\n\t\tthis.y = d3.scale.linear().domain(domain.y).range([this.height, 0]);\n\n\t\tthis.y.magnitude = d3.scale.linear()\n\t\t\t.domain([domain.y[0] - domain.y[0], domain.y[1] - domain.y[0]])\n\t\t\t.range([0, this.height]);\n\t};\n\n\tthis.render = function() {\n\n\t\tvar stackedData = this.stackData();\n\t\tthis.discoverRange();\n\n\t\tthis.renderer.render();\n\n\t\tthis.updateCallbacks.forEach( function(callback) {\n\t\t\tcallback();\n\t\t} );\n\t};\n\n\tthis.update = this.render;\n\n\tthis.stackData = function() {\n\n\t\tvar data = this.series.active()\n\t\t\t.map( function(d) { return d.data } )\n\t\t\t.map( function(d) { return d.filter( function(d) { return this._slice(d) }, this ) }, this);\n\n\t\tthis.stackData.hooks.data.forEach( function(entry) {\n\t\t\tdata = entry.f.apply(self, [data]);\n\t\t} );\n\n\t\tvar layout = d3.layout.stack();\n\t\tlayout.offset( self.offset );\n\n\t\tvar stackedData = layout(data);\n\n\t\tthis.stackData.hooks.after.forEach( function(entry) {\n\t\t\tstackedData = entry.f.apply(self, [data]);\n\t\t} );\n\n\t\tvar i = 0;\n\t\tthis.series.forEach( function(series) {\n\t\t\tif (series.disabled) return;\n\t\t\tseries.stack = stackedData[i++];\n\t\t} );\n\n\t\tthis.stackedData = stackedData;\n\t\treturn stackedData;\n\t};\n\n\tthis.stackData.hooks = { data: [], after: [] };\n\n\tthis._slice = function(d) {\n\n\t\tif (this.window.xMin || this.window.xMax) {\n\n\t\t\tvar isInRange = true;\n\n\t\t\tif (this.window.xMin && d.x < this.window.xMin) isInRange = false;\n\t\t\tif (this.window.xMax && d.x > this.window.xMax) isInRange = false;\n\n\t\t\treturn isInRange;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tthis.onUpdate = function(callback) {\n\t\tthis.updateCallbacks.push(callback);\n\t};\n\n\tthis.registerRenderer = function(renderer) {\n\t\tthis._renderers = this._renderers || {};\n\t\tthis._renderers[renderer.name] = renderer;\n\t};\n\n\tthis.configure = function(args) {\n\n\t\tif (args.width || args.height) {\n\t\t\tthis.setSize(args);\n\t\t}\n\n\t\tRickshaw.keys(this.defaults).forEach( function(k) {\n\t\t\tthis[k] = k in args ? args[k]\n\t\t\t\t: k in this ? this[k]\n\t\t\t\t: this.defaults[k];\n\t\t}, this );\n\n\t\tthis.setRenderer(args.renderer || this.renderer.name, args);\n\t};\n\n\tthis.setRenderer = function(name, args) {\n\n\t\tif (!this._renderers[name]) {\n\t\t\tthrow \"couldn't find renderer \" + name;\n\t\t}\n\t\tthis.renderer = this._renderers[name];\n\n\t\tif (typeof args == 'object') {\n\t\t\tthis.renderer.configure(args);\n\t\t}\n\t};\n\n\tthis.setSize = function(args) {\n\n\t\targs = args || {};\n\n\t\tif (typeof window !== undefined) {\n\t\t\tvar style = window.getComputedStyle(this.element, null);\n\t\t\tvar elementWidth = parseInt(style.getPropertyValue('width'));\n\t\t\tvar elementHeight = parseInt(style.getPropertyValue('height'));\n\t\t}\n\n\t\tthis.width = args.width || elementWidth || 400;\n\t\tthis.height = args.height || elementHeight || 250;\n\n\t\tthis.vis && this.vis\n\t\t\t.attr('width', this.width)\n\t\t\t.attr('height', this.height);\n\t}\n\n\tthis.initialize(args);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":5392}]],"length":5392}
